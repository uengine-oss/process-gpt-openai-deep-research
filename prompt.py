# prompt.py
"""
프롬프트 생성 함수 모음
"""

def create_execution_plan_prompt(form_types: list) -> str:
    prompt = f"""
주어진 폼 타입들을 처리하기 위한 종합적인 실행 계획을 수립하세요.

입력 데이터:
- 폼 타입들: {form_types}

핵심 실행 규칙:
1. **엄격한 단계 순서**: 리포트 → 슬라이드 → 텍스트 (단계 간 중복 처리 금지)
2. **기존 타입만 사용**: 입력된 form_types에 실제로 존재하는 폼 타입만 계획에 포함
3. **가상 폼 생성 금지**: 제공된 form_types에 없는 폼 키를 임의로 생성하거나 가정하지 말 것

타입 매칭 요구사항:
- report_phase에는 "type" 필드가 정확히 "report"인 폼만 포함
- slide_phase에는 "type" 필드가 정확히 "slide"인 폼만 포함  
- text_phase에는 "type" 필드가 "text" 또는 "textarea"인 폼만 포함
- 특정 타입의 폼이 입력에 없으면 해당 단계는 빈 배열 []로 설정
- 입력 form_types의 실제 "key" 값만 사용하고, 새로운 키는 절대 생성하지 말 것

당신의 임무는 모든 폼 타입을 분석하여 다음을 결정하는 최적의 실행 계획을 수립하는 것입니다:
1. 처리 단계와 순서 (리포트 → 슬라이드 → 텍스트)
2. 폼 간 의존성 (논리적 제약 내에서만)
3. 입력-출력 관계

의존성 규칙:
- **리포트**: 의존성 없음 (항상 독립적)
- **슬라이드**: 특정 리포트에 의존 (의미적 매칭)
- **텍스트**: 특정 리포트에 의존 (의미적 매칭)

중요사항: 응답에는 항상 세 단계(report_phase, slide_phase, text_phase)를 모두 포함하되, 
입력에서 실제로 매칭되는 폼만 forms 배열에 포함시키세요. 
빈 단계는 빈 forms 배열 []로 설정하세요.

완전한 JSON 실행 계획을 출력하세요:
{{
    "execution_plan": {{
        "report_phase": {{
            "forms": [
                {{"key": "report_form_1"}},
                {{"key": "report_form_2"}}
            ]
        }},
        "slide_phase": {{
            "forms": [
                {{"key": "slide_form_1", "dependencies": ["report_form_1"]}},
                {{"key": "slide_form_2", "dependencies": ["report_form_2"]}}
            ]
        }},
        "text_phase": {{
            "forms": [
                {{"key": "text_form_1", "dependencies": ["report_form_1"]}},
                {{"key": "text_form_2", "dependencies": ["report_form_2"]}}
            ]
        }}
    }}
}}

슬라이드 및 텍스트의 의미적 관계 규칙:
- **정확한 이름 매칭**: 슬라이드/텍스트와 리포트의 이름이 유사하면 의존성 생성
  (예: "slide_user_guide"는 "report_user_guide"에 의존, "text_admin_summary"는 "report_admin"에 의존)
- **키워드 매칭**: 폼 키의 공통 키워드를 기반으로 매칭
  (예: "slide_admin"은 "report_admin"에 의존, "text_technical"은 "report_technical"에 의존)
- **범위 기반 매칭**: "overview", "summary", "all", "total"이 포함된 폼은 모든 리포트에 의존
- **대체 방안**: 의미적 매칭이 없으면 슬라이드/텍스트는 사용 가능한 모든 리포트에 의존

중요: 입력에서 제공된 실제 폼 키를 사용하세요. 아래 예시 키가 아닌!
아래 예시는 단순히 형식 참조용이며, 제공된 form_types의 실제 폼 키로 교체하세요.

기억사항: 
- 슬라이드와 텍스트 폼 모두 의미적 매칭을 통해 특정 리포트에 의존성 설정
- 입력 form_types에 실제로 존재하는 폼만 사용
- 매칭되는 폼이 없는 단계는 빈 forms 배열 []로 반환

입력된 form_types에 실제로 존재하는 폼 타입만 포함하고 정확한 타입과 매칭되는 
완전하고 유효한 JSON 실행 계획을 출력하세요.
매칭되는 폼이 없는 단계는 빈 forms 배열로 설정하세요.
"""
    return prompt

def create_toc_prompt(context_summary: str, feedbacks: str) -> str:
    return f"""
당신은 전문적인 보고서 목차(TOC) 생성 전문가입니다.

**역할 설명:**
이전 컨텍스트 정보와 피드백을 바탕으로 논리적이고 체계적인 보고서 목차를 JSON 형식으로 생성하세요.

**핵심 규칙:**
1. **논리적 구조**: 도입부 → 본론 → 결론 순서로 구성
2. **적절한 깊이**: 최대 3레벨 (1. → 1.1 → 1.1.1)
3. **균형잡힌 분량**: 각 대분류별 하위 항목 2-4개 유지
4. **구체적 제목**: 추상적 표현 금지, 구체적 내용 표현
5. **컨텍스트 반영**: 제공된 요약 내용과 피드백을 충분히 반영
6. **실용성 중시**: 실제 보고서 작성에 바로 활용 가능한 구조

**입력 정보:**
- 이전 컨텍스트 요약: {context_summary}
- 피드백 내용: {feedbacks}

**결과 형식 (JSON):**
다음과 같은 예시 구조로 목차를 생성하세요:

{{
  "title": "보고서 제목",
  "toc": [
    {{
      "number": "1",
      "title": "서론",
      "subsections": [
        {{"number": "1.1", "title": "배경 및 현황"}},
        {{"number": "1.2", "title": "목적 및 범위"}},
        {{"number": "1.3", "title": "연구방법론"}}
      ]
    }},
    {{
      "number": "2", 
      "title": "핵심 분석",
      "subsections": [
        {{"number": "2.1", "title": "현황 분석"}},
        {{"number": "2.2", "title": "문제점 도출"}},
        {{"number": "2.3", "title": "원인 분석"}}
      ]
    }},
    {{
      "number": "3",
      "title": "결론 및 제언", 
      "subsections": [
        {{"number": "3.1", "title": "주요 발견사항"}},
        {{"number": "3.2", "title": "개선 방안"}},
        {{"number": "3.3", "title": "향후 과제"}}
      ]
    }}
  ]
}}

위 예시를 참고하여 컨텍스트 내용에 맞는 구체적이고 실용적인 목차를 JSON 형식으로 생성하세요.
""" 


def create_slide_generation_prompt(content: str, user_info: list) -> str:
    prompt = f"""
제공된 마크다운 리포트를 심층 분석한 후, reveal.js 호환 마크다운 슬라이드 프레젠테이션을 완성도 높게 생성하세요.

**1단계: 내용 구조 분석**
- 주요 섹션, 핵심 포인트, 중요한 데이터 포인트를 식별
- 별도 슬라이드에서 강조되어야 할 중요한 내용 파악
- 논리적 흐름을 고려한 매력적인 프레젠테이션 세그먼트 구조 설계
- 독자 관점에서 이해하기 쉽고 임팩트 있는 슬라이드 플로우 계획
- 만약 내용이 부족한 경우, 내용 구성에서 요구사항과 목적을 참고하여 온전한 슬라이드를 생성하세요. (10페이지 분량 정도)

**2단계: Reveal.js 슬라이드 생성**
- 분석된 구조를 바탕으로 reveal.js 호환 마크다운 슬라이드 생성
- 수평 슬라이드(---)와 수직 슬라이드(--)를 포함한 적절한 reveal.js 마크다운 구문 사용
- 헤더, 불릿 포인트, 적절한 강조가 포함된 올바른 형식 적용
- 전환 효과를 포함하고 프레젠테이션 전체에서 시각적 일관성 유지

내용구성: {content}
사용자 정보: {user_info}

**핵심 지침**: 사용자 정보가 제공되면 프레젠테이션에 포함하세요:
- 제목 슬라이드에서 user_info.name을 발표자 이름으로 사용
- 관련 있는 경우 user_info.position과 user_info.department 포함
- 적절한 경우 사용자 컨텍스트로 프레젠테이션 개인화

**필수 슬라이드 구성:**
1. **제목 슬라이드** - 주제, 발표자 이름(user_info에서), 메타데이터 포함
2. **목차/안건 슬라이드** - 프레젠테이션 전체 구조 안내
3. **주요 내용 슬라이드들** - 제목과 핵심 포인트가 있는 각 섹션별 슬라이드
4. **결론 슬라이드** - 요약 및 마무리

**기술적 요구사항:**
- 적절한 reveal.js 구문(새 슬라이드용 ---, 수직 슬라이드용 --)
- 불릿 포인트, 헤더, 강조 형식 적절히 활용
- 논리적 슬라이드 전환과 흐름
- 깔끔하고 전문적인 프레젠테이션 구조
- 적절한 경우 사용자 정보 통합(발표자 이름, 부서 등)

**🚨 중요한 출력 형식 규칙:**
- 절대로 ```markdown, ```html, ``` 같은 코드 블록으로 결과를 감싸지 마세요
- 마크다운 내용을 직접 출력하세요 (코드 블록 없이)
- reveal.js 마크다운 구문을 그대로 사용하되, 코드 블록으로 감싸지 말 것
- HTML 주석이나 코드 블록 형태의 감싸기는 절대 금지

**내용에서 파악한 실제 주제와 내용을 중심으로 슬라이드를 구성하세요.**
결과물은 reveal.js 프레젠테이션 프레임워크와 직접 사용할 수 있도록 준비되어야 합니다.

다음을 포함하는 완전한 reveal.js 마크다운 형식 슬라이드 프레젠테이션을 생성하세요:
- 제목 슬라이드부터 결론까지 완전한 구조
- reveal.js 호환 마크다운 구문 사용
- 논리적 흐름과 전문적인 프레젠테이션 품질
- 사용자 정보 적절히 통합
"""
    return prompt

def create_text_form_generation_prompt(report_content: str, topic: str, text_form_keys: list, user_info: list) -> str:
    prompt = f"""
주어진 폼 키들에 대해 전문적이고 현실적인 값을 생성하세요.

**입력 정보**:
- 리포트 내용 또는 이전 작업 내용: {report_content}
- 워크플로우 단계: {topic}
- 대상 폼 키들: {text_form_keys}
- 사용자 정보: {user_info}

**핵심 규칙**:
1. **정확한 키 매칭**: text_form_keys에 지정된 키에 대해서만 값 생성
2. **평면 JSON 구조**: 중첩 객체나 추가 필드 절대 금지
3. **전문적 품질**: 구체적이고 상세한 값 생성 (플레이스홀더 금지)
4. **사용자 정보 보존**: user_info 값은 정확히 그대로 사용
5. **컨텍스트 활용**: 리포트 내용 또는 이전 컨텍스트를 바탕으로 일관성 있는 값 생성

**값 생성 가이드**:
- **사용자 관련** (이름, 부서, 직급, 이메일): user_info에서 정확히 가져오기
- **날짜/시간**: 한국어 형식으로 구체적인 날짜 (예: "2024년 12월 23일부터 27일까지")
- **분류/유형**: 맥락에 맞는 구체적 카테고리
- **설명/이유**: 상세하고 전문적인 업무 관련 설명
- **기타**: 필드명의 의미를 분석하여 적절한 값 생성

**중요**: 리포트 내용이 비어있으면 이전 컨텍스트와 워크플로우 단계를 활용하여 적절한 값을 생성하세요.

**출력 형식**:
text_form_keys의 각 키를 JSON 키로 사용하는 평면 JSON 객체를 생성하세요.

{{
  "form_key_1": "구체적이고_상세한_값",
  "form_key_2": "전문적이고_현실적인_값"
}}

**필수 준수사항**:
- text_form_keys에 있는 모든 키 포함
- text_form_keys에 없는 키는 절대 추가 금지
- 중첩 구조나 그룹화 절대 금지
- 유효한 JSON 형식 출력
- 각 값은 구체적이고 전문적이며 현실적이어야 함
- 플레이스홀더나 예시 텍스트 사용 금지

주어진 폼 키들에 대해 고품질의 전문적인 값을 생성하여 완전한 JSON 객체로 출력하세요.
"""
    return prompt

def create_summary_prompt(outputs_str: str, feedbacks_str: str) -> str:
    return f"""새 산출물과 피드백을 병합하여, 아래 형식에 맞는 하나의 통합 요약을 생성하세요.

**핵심 원칙:**
1. **보고서 형식**: 결과물 내용이, 마크다운 형식의 보고서 내용 -> 목차(섹션, TOC) 추출 후 목차(섹션)별 요약 진행
2. **단순 텍스트**: 그저 일반 요구사항과 같은 텍스트이면서, 목차 없으면 → 목적+요구사항 추출
3. **피드백**: "피드백 내용"이 있는 경우에만 → 피드백 내용을 생성, 만약 없으면 "없음"으로 처리
4. **목차(섹션, TOC) 원본 유지**: 섹션명을 있는 그대로 추출, 왜곡 금지 (가장 중요!)
5. **분량 제한**: 전체 2000자 이내
6. **수치 우선**: 숫자, 데이터, 구체적 사실 반드시 포함

⚠️ 필수: 
1. 목차명(섹션)는 원본 그대로, 수치 데이터 우선, 2000자 이내 (목차 명 왜곡 및 수정 금지)
2. 없는 목차(섹션)를 피드백을 보고 생성하지말고, 있는 그대로 목차(섹션)를 추출하고, 피드백은 같이 전달되니까 현재 단계에서 반영하지 않아도 됩니다.
3. 결과물 내용에 명확히 목차(섹션)가 식별된 구조화된 보고서 형식의 내용일 경우에만 목차(섹션) 추출 후 목차별 요약 진행
4. 목차(섹션)가 없으면 그냥 "없음"으로 처리
5. 결과물은 반드시 그저 요약 및 핵심 정보 추출일 뿐입니다. 피드백을 반영하는게 아닙니다.
6. 전달된 값은 사전 형태로, 중첩된 구조입니다. 오로직 값을 기준으로 목차를 의미적으로 파악해서 추출하세요. 단순히 키를 목차로 두면 안됩니다.(보통 키는 영문자로 되어있음)
7. 내용이 사전형식(딕셔너리 or 리스트)인 경우 값을 기준으로 판단하여 리포트 형식인지 일반 텍스트 형식인지 판단하세요.

**결과물 내용:** {outputs_str}
**피드백 내용:** {feedbacks_str}

===== 요약 형식 (반드시 이 형식을 따르세요) =====

📌 목적 : ["결과물 내용"을 분석하여 목적을 정의]
📌 요구사항 : ["결과물 내용"을 분석하여 요구사항을 정의]
📌 피드백 : ["피드백 내용"만 을 분석하여 피드백을 정의]

📋 보고서 제목: [정확히 추출한 제목 없으면, 문맥상 흐름을 분석하여 제목을 정의]

🎯 목차별 핵심 요약:

1️⃣ [목차1 제목]:
   • 핵심내용 1: [중요 포인트를 한 문장으로]
   • 핵심내용 2: [주요 데이터나 결과를 한 문장으로]
   • 핵심내용 3: [결론이나 시사점을 한 문장으로]

2️⃣ [목차2 제목]:
   • 핵심내용 1: [중요 포인트를 한 문장으로]
   • 핵심내용 2: [주요 데이터나 결과를 한 문장으로]
   • 핵심내용 3: [결론이나 시사점을 한 문장으로]

3️⃣ [목차3 제목]:
   • 핵심내용 1: [중요 포인트를 한 문장으로]
   • 핵심내용 2: [주요 데이터나 결과를 한 문장으로]
   • 핵심내용 3: [결론이나 시사점을 한 문장으로]

[계속해서 모든 목차에 대해 동일한 형식으로...]"""